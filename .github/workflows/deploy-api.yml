## Instructs GitHub Actions how to deploy the latest API image to your EC2 server.
## Trigged when push to the `main` branch and the changed files match the paths below.
##  SSHes into the EC2 instance, ensures the repo is present, logs in to GHCR,
##  pulls the newest `:prod` image, and restarts only the API service via Docker Compose.
name: deploy-api
on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy-api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Update service on EC2 (SSH)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GHCR_USER,GHCR_PAT
          env: 
            GHCR_USER: ${{ secrets.GHCR_USER }}
            GHCR_PAT: ${{ secrets.GHCR_PAT }}
          script_stop: true
          debug: true
          script: |
            set -euo pipefail

            # Defaults if envs not set
            : "${GHCR_USER:=nycounihan}"

            # First-time clone or update
            [ -d ~/bluecouch ] || git clone https://github.com/NYCounihan/bluecouch.git ~/bluecouch
            cd ~/bluecouch
            git stash || true
            git pull || true

            # GHCR login (requires GHCR_PAT with read:packages)
            echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin

            # Pick compose command (plugin or legacy binary)
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif docker-compose version >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "Docker Compose not found. Install it on the instance, then rerun." >&2
              exit 1
            fi

            # Ensure all services are running (API will pull from GHCR)
            $DC up -d

            # Optional cleanup
            docker image prune -f
